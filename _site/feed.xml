<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-05-05T15:05:08-04:00</updated><id>http://localhost:4000/</id><title type="html">OSIRIS</title><author><name>isislab</name></author><entry><title type="html">CSAW CTF 2016 Finals Problems repo release</title><link href="http://localhost:4000/csaw/2017/04/25/CSAW-CTF-2016-FINALS-Problems-repo-release/" rel="alternate" type="text/html" title="CSAW CTF 2016 Finals Problems repo release" /><published>2017-04-25T00:00:00-04:00</published><updated>2017-04-25T00:00:00-04:00</updated><id>http://localhost:4000/csaw/2017/04/25/CSAW-CTF-2016-FINALS-Problems-repo-release</id><content type="html" xml:base="http://localhost:4000/csaw/2017/04/25/CSAW-CTF-2016-FINALS-Problems-repo-release/">&lt;div class=&quot;post-header mb2&quot;&gt;
  
  &lt;span class=&quot;post-meta&quot;&gt;&lt;b&gt; - hypersonic&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span class=&quot;post-meta small&quot;&gt;
  
    1 minute read
  
  &lt;/span&gt;
&lt;/div&gt;

&lt;article class=&quot;post-content&quot;&gt;
  &lt;p&gt;A few weeks ago, we ran the annual &lt;a href=&quot;https://ctf.csaw.io&quot;&gt;CSAW CTF&lt;/a&gt; finals round. We’ve released the problems so that anyone can play the problems themselves at home.&lt;/p&gt;

&lt;p&gt;Check them out &lt;a href=&quot;https://github.com/isislab/CSAW-CTF-2016-Finals&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to everyone for playing and I hope you’re ready for CSAW next year.&lt;/p&gt;

&lt;/article&gt;</content><author><name>isislab</name></author><category term="CSAW" /><summary type="html">- hypersonic 1 minute read A few weeks ago, we ran the annual CSAW CTF finals round. We’ve released the problems so that anyone can play the problems themselves at home. Check them out here. Thanks to everyone for playing and I hope you’re ready for CSAW next year.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/placeholder-social.png" /></entry><entry><title type="html">CSAW CTF 2015 VM</title><link href="http://localhost:4000/csaw/2016/06/11/CSAW-CTF-2015-VM/" rel="alternate" type="text/html" title="CSAW CTF 2015 VM" /><published>2016-06-11T00:00:00-04:00</published><updated>2016-06-11T00:00:00-04:00</updated><id>http://localhost:4000/csaw/2016/06/11/CSAW-CTF-2015-VM</id><content type="html" xml:base="http://localhost:4000/csaw/2016/06/11/CSAW-CTF-2015-VM/">&lt;div class=&quot;post-header mb2&quot;&gt;
  &lt;span class=&quot;post-meta&quot;&gt;Jun 11, 2016&lt;/span&gt;&lt;br&gt;
  
  &lt;span class=&quot;post-meta&quot;&gt;&lt;b&gt; - breadchris&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span class=&quot;post-meta small&quot;&gt;
  
    1 minute read
  
  &lt;/span&gt;
&lt;/div&gt;

&lt;article class=&quot;post-content&quot;&gt;
  &lt;p&gt;Last year, we had many ctf teams from around the world compete in the annual &lt;a href=&quot;https://ctf.csaw.io&quot;&gt;CSAW CTF&lt;/a&gt;. This event is geared toward college undergradates, however it is open to anyone who wishes to play.&lt;/p&gt;

&lt;p&gt;We’re releasing most of the CSAW CTF challenges in a VM for those who were not competing to download and try on their own.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/0Byif2sR5vM3kZ1pOdGFVNnZsV00/view?usp=sharing&quot;&gt;CSAW Quals 2015 VM&lt;/a&gt; - MD5: f43b6d38614f8e51592e38e2250de671&lt;/p&gt;

&lt;p&gt;Get ready for CSAW CTF 2016!&lt;/p&gt;

&lt;p&gt;Credentials (ssh):&lt;/p&gt;

&lt;p&gt;Username: user&lt;/p&gt;

&lt;p&gt;Password: user&lt;/p&gt;

&lt;p&gt;Admin Credentials for CTFd:&lt;/p&gt;

&lt;p&gt;Username: admin&lt;/p&gt;

&lt;p&gt;Password: admin&lt;/p&gt;

&lt;/article&gt;</content><author><name>isislab</name></author><category term="CSAW" /><summary type="html">Jun 11, 2016 - breadchris 1 minute read Last year, we had many ctf teams from around the world compete in the annual CSAW CTF. This event is geared toward college undergradates, however it is open to anyone who wishes to play. We’re releasing most of the CSAW CTF challenges in a VM for those who were not competing to download and try on their own. CSAW Quals 2015 VM - MD5: f43b6d38614f8e51592e38e2250de671 Get ready for CSAW CTF 2016! Credentials (ssh): Username: user Password: user Admin Credentials for CTFd: Username: admin Password: admin</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/placeholder-social.png" /></entry><entry><title type="html">CSAW CTF 2015 - Sharpturn</title><link href="http://localhost:4000/csaw/2015/10/03/CSAW-CTF-2015-VM/" rel="alternate" type="text/html" title="CSAW CTF 2015 - Sharpturn" /><published>2015-10-03T00:00:00-04:00</published><updated>2015-10-03T00:00:00-04:00</updated><id>http://localhost:4000/csaw/2015/10/03/CSAW-CTF-2015-VM</id><content type="html" xml:base="http://localhost:4000/csaw/2015/10/03/CSAW-CTF-2015-VM/">&lt;div class=&quot;post-header mb2&quot;&gt;
  &lt;span class=&quot;post-meta&quot;&gt;Oct 3, 2015&lt;/span&gt;&lt;br&gt;
  
  &lt;span class=&quot;post-meta&quot;&gt;&lt;b&gt; - ghost&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span class=&quot;post-meta small&quot;&gt;
  
    2 minute read
  
  &lt;/span&gt;
&lt;/div&gt;

&lt;article class=&quot;post-content&quot;&gt;
  &lt;p&gt;We’re given a .tar.xz which contains a partially corrupted git repo. Running &lt;code&gt;git log&lt;/code&gt; reveals 4 commits, which all primarily build out one main .c file:&lt;/p&gt;

&lt;pre&gt;
commit 4a2f335e042db12cc32a684827c5c8f7c97fe60b
Author: sharpturn &lt;csaw&gt;
Date:   Sat Sep 5 18:11:05 2015 -0700

    All done now! Should calculate the flag..assuming everything went okay.

commit d57aaf773b1a8c8e79b6e515d3f92fc5cb332860
Author: sharpturn &lt;csaw&gt;
Date:   Sat Sep 5 18:09:31 2015 -0700

    There's only two factors. Don't let your calculator lie.

commit 2e5d553f41522fc9036bacce1398c87c2483c2d5
Author: sharpturn &lt;csaw&gt;
Date:   Sat Sep 5 18:08:51 2015 -0700

    It's getting better!

commit 7c9ba8a38ffe5ce6912c69e7171befc64da12d4c
Author: sharpturn &lt;csaw&gt;
Date:   Sat Sep 5 18:08:05 2015 -0700

    Initial commit! This one should be fun.
&lt;/csaw&gt;&lt;/csaw&gt;&lt;/csaw&gt;&lt;/csaw&gt;&lt;/pre&gt;

&lt;p&gt;However if we run &lt;code&gt;git fsck&lt;/code&gt; (as later put in as the problem’s hint), we notice that there are 3 corrupt blobs, corresponding to the 3 non-initial commits:&lt;/p&gt;

&lt;pre&gt;
Checking object directories: 100% (256/256), done.
error: sha1 mismatch 354ebf392533dce06174f9c8c093036c138935f3
error: 354ebf392533dce06174f9c8c093036c138935f3: object corrupt or missing
error: sha1 mismatch d961f81a588fcfd5e57bbea7e17ddae8a5e61333
error: d961f81a588fcfd5e57bbea7e17ddae8a5e61333: object corrupt or missing
error: sha1 mismatch f8d0839dd728cb9a723e32058dcc386070d5e3b5
error: f8d0839dd728cb9a723e32058dcc386070d5e3b5: object corrupt or missing
missing blob 354ebf392533dce06174f9c8c093036c138935f3
missing blob f8d0839dd728cb9a723e32058dcc386070d5e3b5
missing blob d961f81a588fcfd5e57bbea7e17ddae8a5e61333
&lt;/pre&gt;

&lt;p&gt;After zlib-decoding the first corrupted blob (354ebf3…), the string “51337” stands out as strange (the ‘5’ in particular). Assuming this challenge is feasible, we assume that there is only one or two characters in the blob that have been changed. After writing a quick python script which automatically tries substituting each ASCII printable character in a particular space, we run the script against this blob, assuming the character '5’ in '51337’ has been modified. The script successfully changes the 5 into a 3, and the hash is now valid.&lt;/p&gt;

&lt;p&gt;This script was then run again on the second blob (d961f81…) after manually changing the 51337 into 31337, and the script successfully found a hash match by changing '270031727027’ into '272031727027’. After applying both of these changes to the final blob with an incorrect hash (f8d0839…), we noticed that the flag was not properly cout’d (the line was &lt;code&gt;cout &amp;lt;&amp;lt; &amp;amp;lag&lt;/code&gt;). We assumed that the character flip in this blob was changing ‘f’ to ‘&amp;amp;’ in &lt;code&gt;cout &amp;lt;&amp;lt; flag&lt;/code&gt;, and were correct. After extracting the code from the final blob, making the 3 changes, and compiling, getting the flag is as simple as following the directions of the program.&lt;/p&gt;

&lt;p&gt;The final script is below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;orig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'zlib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orig&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Indexes? &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'zlib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;git fsck&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Found&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;No matches&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'zlib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/article&gt;</content><author><name>isislab</name></author><category term="CSAW" /><summary type="html">Oct 3, 2015 - ghost 2 minute read We’re given a .tar.xz which contains a partially corrupted git repo. Running git log reveals 4 commits, which all primarily build out one main .c file: commit 4a2f335e042db12cc32a684827c5c8f7c97fe60b Author: sharpturn Date: Sat Sep 5 18:11:05 2015 -0700 All done now! Should calculate the flag..assuming everything went okay. commit d57aaf773b1a8c8e79b6e515d3f92fc5cb332860 Author: sharpturn Date: Sat Sep 5 18:09:31 2015 -0700 There's only two factors. Don't let your calculator lie. commit 2e5d553f41522fc9036bacce1398c87c2483c2d5 Author: sharpturn Date: Sat Sep 5 18:08:51 2015 -0700 It's getting better! commit 7c9ba8a38ffe5ce6912c69e7171befc64da12d4c Author: sharpturn Date: Sat Sep 5 18:08:05 2015 -0700 Initial commit! This one should be fun. However if we run git fsck (as later put in as the problem’s hint), we notice that there are 3 corrupt blobs, corresponding to the 3 non-initial commits: Checking object directories: 100% (256/256), done. error: sha1 mismatch 354ebf392533dce06174f9c8c093036c138935f3 error: 354ebf392533dce06174f9c8c093036c138935f3: object corrupt or missing error: sha1 mismatch d961f81a588fcfd5e57bbea7e17ddae8a5e61333 error: d961f81a588fcfd5e57bbea7e17ddae8a5e61333: object corrupt or missing error: sha1 mismatch f8d0839dd728cb9a723e32058dcc386070d5e3b5 error: f8d0839dd728cb9a723e32058dcc386070d5e3b5: object corrupt or missing missing blob 354ebf392533dce06174f9c8c093036c138935f3 missing blob f8d0839dd728cb9a723e32058dcc386070d5e3b5 missing blob d961f81a588fcfd5e57bbea7e17ddae8a5e61333 After zlib-decoding the first corrupted blob (354ebf3…), the string “51337” stands out as strange (the ‘5’ in particular). Assuming this challenge is feasible, we assume that there is only one or two characters in the blob that have been changed. After writing a quick python script which automatically tries substituting each ASCII printable character in a particular space, we run the script against this blob, assuming the character '5’ in '51337’ has been modified. The script successfully changes the 5 into a 3, and the hash is now valid. This script was then run again on the second blob (d961f81…) after manually changing the 51337 into 31337, and the script successfully found a hash match by changing '270031727027’ into '272031727027’. After applying both of these changes to the final blob with an incorrect hash (f8d0839…), we noticed that the flag was not properly cout’d (the line was cout &amp;lt;&amp;lt; &amp;amp;lag). We assumed that the character flip in this blob was changing ‘f’ to ‘&amp;amp;’ in cout &amp;lt;&amp;lt; flag, and were correct. After extracting the code from the final blob, making the 3 changes, and compiling, getting the flag is as simple as following the directions of the program. The final script is below: import sys, string, os orig = open(sys.argv[1]).read().decode('zlib') print orig pos = input(&quot;Indexes? &quot;) for p in pos: for c in string.digits: o = orig[:p]+c+orig[p+1:] f = open(sys.argv[1],'w') f.write(o.encode('zlib')) f.close() if sys.argv[1] not in os.popen(&quot;git fsck&quot;).read(): print &quot;Found&quot; os._exit(0) print &quot;No matches&quot; f = open(sys.argv[1],'w') f.write(orig.encode('zlib')) f.close()</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/placeholder-social.png" /></entry></feed>