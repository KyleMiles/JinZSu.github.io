

[
  
  
    
    
      {
        "title": "CSAW CTF 2015 - Sharpturn",
        "excerpt": "\n  Oct 3, 2015\n  \n   - ghost\n  \n  \n    2 minute read\n  \n  \n\n\n\n  We’re given a .tar.xz which contains a partially corrupted git repo. Running git log reveals 4 commits, which all primarily build out one main .c file:\n\n\ncommit 4a2f335e042db12cc32a684827c5c8f7c97fe60b\nAuthor: sharpturn \nDate:   Sat Sep 5 18:11:05 2015 -0700\n\n    All done now! Should calculate the flag..assuming everything went okay.\n\ncommit d57aaf773b1a8c8e79b6e515d3f92fc5cb332860\nAuthor: sharpturn \nDate:   Sat Sep 5 18:09:31 2015 -0700\n\n    There's only two factors. Don't let your calculator lie.\n\ncommit 2e5d553f41522fc9036bacce1398c87c2483c2d5\nAuthor: sharpturn \nDate:   Sat Sep 5 18:08:51 2015 -0700\n\n    It's getting better!\n\ncommit 7c9ba8a38ffe5ce6912c69e7171befc64da12d4c\nAuthor: sharpturn \nDate:   Sat Sep 5 18:08:05 2015 -0700\n\n    Initial commit! This one should be fun.\n\n\nHowever if we run git fsck (as later put in as the problem’s hint), we notice that there are 3 corrupt blobs, corresponding to the 3 non-initial commits:\n\n\nChecking object directories: 100% (256/256), done.\nerror: sha1 mismatch 354ebf392533dce06174f9c8c093036c138935f3\nerror: 354ebf392533dce06174f9c8c093036c138935f3: object corrupt or missing\nerror: sha1 mismatch d961f81a588fcfd5e57bbea7e17ddae8a5e61333\nerror: d961f81a588fcfd5e57bbea7e17ddae8a5e61333: object corrupt or missing\nerror: sha1 mismatch f8d0839dd728cb9a723e32058dcc386070d5e3b5\nerror: f8d0839dd728cb9a723e32058dcc386070d5e3b5: object corrupt or missing\nmissing blob 354ebf392533dce06174f9c8c093036c138935f3\nmissing blob f8d0839dd728cb9a723e32058dcc386070d5e3b5\nmissing blob d961f81a588fcfd5e57bbea7e17ddae8a5e61333\n\n\nAfter zlib-decoding the first corrupted blob (354ebf3…), the string “51337” stands out as strange (the ‘5’ in particular). Assuming this challenge is feasible, we assume that there is only one or two characters in the blob that have been changed. After writing a quick python script which automatically tries substituting each ASCII printable character in a particular space, we run the script against this blob, assuming the character '5’ in '51337’ has been modified. The script successfully changes the 5 into a 3, and the hash is now valid.\n\nThis script was then run again on the second blob (d961f81…) after manually changing the 51337 into 31337, and the script successfully found a hash match by changing '270031727027’ into '272031727027’. After applying both of these changes to the final blob with an incorrect hash (f8d0839…), we noticed that the flag was not properly cout’d (the line was cout &lt;&lt; &amp;lag). We assumed that the character flip in this blob was changing ‘f’ to ‘&amp;’ in cout &lt;&lt; flag, and were correct. After extracting the code from the final blob, making the 3 changes, and compiling, getting the flag is as simple as following the directions of the program.\n\nThe final script is below:\n\nimport sys, string, os\n\norig = open(sys.argv[1]).read().decode('zlib')\nprint orig\n\npos = input(\"Indexes? \")\n\nfor p in pos:\n    for c in string.digits:\n        o = orig[:p]+c+orig[p+1:]\n        f = open(sys.argv[1],'w')\n        f.write(o.encode('zlib'))\n        f.close()\n        if sys.argv[1] not in os.popen(\"git fsck\").read():\n            print \"Found\"\n            os._exit(0)\n\nprint \"No matches\"\nf = open(sys.argv[1],'w')\nf.write(orig.encode('zlib'))\nf.close()\n\n\n",
        "content": " Oct 3, 2015  - ghost   2 minute read  We’re given a .tar.xz which contains a partially corrupted git repo. Running git log reveals 4 commits, which all primarily build out one main .c file: commit 4a2f335e042db12cc32a684827c5c8f7c97fe60b Author: sharpturn Date: Sat Sep 5 18:11:05 2015 -0700 All done now! Should calculate the flag..assuming everything went okay. commit d57aaf773b1a8c8e79b6e515d3f92fc5cb332860 Author: sharpturn Date: Sat Sep 5 18:09:31 2015 -0700 There's only two factors. Don't let your calculator lie. commit 2e5d553f41522fc9036bacce1398c87c2483c2d5 Author: sharpturn Date: Sat Sep 5 18:08:51 2015 -0700 It's getting better! commit 7c9ba8a38ffe5ce6912c69e7171befc64da12d4c Author: sharpturn Date: Sat Sep 5 18:08:05 2015 -0700 Initial commit! This one should be fun. However if we run git fsck (as later put in as the problem’s hint), we notice that there are 3 corrupt blobs, corresponding to the 3 non-initial commits: Checking object directories: 100% (256/256), done. error: sha1 mismatch 354ebf392533dce06174f9c8c093036c138935f3 error: 354ebf392533dce06174f9c8c093036c138935f3: object corrupt or missing error: sha1 mismatch d961f81a588fcfd5e57bbea7e17ddae8a5e61333 error: d961f81a588fcfd5e57bbea7e17ddae8a5e61333: object corrupt or missing error: sha1 mismatch f8d0839dd728cb9a723e32058dcc386070d5e3b5 error: f8d0839dd728cb9a723e32058dcc386070d5e3b5: object corrupt or missing missing blob 354ebf392533dce06174f9c8c093036c138935f3 missing blob f8d0839dd728cb9a723e32058dcc386070d5e3b5 missing blob d961f81a588fcfd5e57bbea7e17ddae8a5e61333 After zlib-decoding the first corrupted blob (354ebf3…), the string “51337” stands out as strange (the ‘5’ in particular). Assuming this challenge is feasible, we assume that there is only one or two characters in the blob that have been changed. After writing a quick python script which automatically tries substituting each ASCII printable character in a particular space, we run the script against this blob, assuming the character '5’ in '51337’ has been modified. The script successfully changes the 5 into a 3, and the hash is now valid. This script was then run again on the second blob (d961f81…) after manually changing the 51337 into 31337, and the script successfully found a hash match by changing '270031727027’ into '272031727027’. After applying both of these changes to the final blob with an incorrect hash (f8d0839…), we noticed that the flag was not properly cout’d (the line was cout &lt;&lt; &amp;lag). We assumed that the character flip in this blob was changing ‘f’ to ‘&amp;’ in cout &lt;&lt; flag, and were correct. After extracting the code from the final blob, making the 3 changes, and compiling, getting the flag is as simple as following the directions of the program. The final script is below: import sys, string, os orig = open(sys.argv[1]).read().decode('zlib') print orig pos = input(\"Indexes? \") for p in pos:  for c in string.digits:  o = orig[:p]+c+orig[p+1:]  f = open(sys.argv[1],'w')  f.write(o.encode('zlib'))  f.close()  if sys.argv[1] not in os.popen(\"git fsck\").read():   print \"Found\"   os._exit(0) print \"No matches\" f = open(sys.argv[1],'w') f.write(orig.encode('zlib')) f.close() ",
        "url": "/csaw/2015/10/03/CSAW-CTF-2015-VM/"
      },
    
      {
        "title": "CSAW CTF 2015 VM",
        "excerpt": "\n  Jun 11, 2016\n  \n   - breadchris\n  \n  \n    1 minute read\n  \n  \n\n\n\n  Last year, we had many ctf teams from around the world compete in the annual CSAW CTF. This event is geared toward college undergradates, however it is open to anyone who wishes to play.\n\nWe’re releasing most of the CSAW CTF challenges in a VM for those who were not competing to download and try on their own.\n\nCSAW Quals 2015 VM - MD5: f43b6d38614f8e51592e38e2250de671\n\nGet ready for CSAW CTF 2016!\n\nCredentials (ssh):\n\nUsername: user\n\nPassword: user\n\nAdmin Credentials for CTFd:\n\nUsername: admin\n\nPassword: admin\n\n\n\n",
        "content": " Jun 11, 2016  - breadchris   1 minute read  Last year, we had many ctf teams from around the world compete in the annual CSAW CTF. This event is geared toward college undergradates, however it is open to anyone who wishes to play. We’re releasing most of the CSAW CTF challenges in a VM for those who were not competing to download and try on their own. CSAW Quals 2015 VM - MD5: f43b6d38614f8e51592e38e2250de671 Get ready for CSAW CTF 2016! Credentials (ssh): Username: user Password: user Admin Credentials for CTFd: Username: admin Password: admin ",
        "url": "/csaw/2016/06/11/CSAW-CTF-2015-VM/"
      },
    
      {
        "title": "CSAW CTF 2016 Finals Problems repo release",
        "excerpt": "\n  \n   - hypersonic\n  \n  \n    1 minute read\n  \n  \n\n\n\n  A few weeks ago, we ran the annual CSAW CTF finals round. We’ve released the problems so that anyone can play the problems themselves at home.\n\nCheck them out here.\n\nThanks to everyone for playing and I hope you’re ready for CSAW next year.\n\n\n",
        "content": "  - hypersonic   1 minute read  A few weeks ago, we ran the annual CSAW CTF finals round. We’ve released the problems so that anyone can play the problems themselves at home. Check them out here. Thanks to everyone for playing and I hope you’re ready for CSAW next year. ",
        "url": "/csaw/2017/04/25/CSAW-CTF-2016-FINALS-Problems-repo-release/"
      },
    
  
  
  
  {
    "title": "Getting Involved",
    "excerpt": "\n",
    "content": "Cyber Security Club \tThe Cyber Security Club is an open weekly seminar run by the OSIRIS lab. Each week during the semester we have students, researchers, and industry professionals give informal lectures and presentations on a variety of topics related to security. All Cyber Security Club speakers are selected by invite only. View the Cyber Security Club archives here. Hack Night Developed from the materials of NYU Tandon’s old Penetration Testing and Vulnerability Analysis course, Hack Night is a sobering introduction to offensive security. A lot of complex technical content is covered very quickly. Students are introduced to a wide variety of complex and immersive topics over thirteen weeks. Click Here to see the official Hack Night website If you have any questions or would like to attend a Hack Night session, contact Chris Thompson. Milk Night Milk Night is every Wednesday during the regular semester at 4:30 PM in the OSIRIS Lab at NYU Tandon. OSIRIS Lab, RH 219 Six MetroTech Center Brooklyn, NY 11201 ",
    "url": "/Getting_Involved/"
  },
  
  {
    "title": "Industry",
    "excerpt": "\n",
    "content": "\"Hey what can I get from joining OSIRIS?\" \"Hacking and Stuff\" ",
    "url": "/Industry/"
  },
  
  {
    "title": "Research",
    "excerpt": "Category index\n",
    "content": " ",
    "url": "/categories/"
  },
  
  {
    "title": "About OSIRIS",
    "excerpt": "\n",
    "content": "The Offensive Security, Incident Response and Internet Security Laboratory (OSIRIS Lab) is a security research environment where students analyze and understand how attackers take advantage of real systems. This approach gives our students a unique perspective and a proper foundation that allows them to master any area of security at NYU Tandon. OSIRIS GitHub    ",
    "url": "/"
  },
  
  {
    "title": "Members",
    "excerpt": "\n",
    "content": " Current Leaders: President: Momopranto Amin Vice President: Chris Thompson Secretary: Nick Gregory Hackers in residence Brad Antoniewicz Brad Antoniewicz works in Intel Security Foundstone’s security research division to uncover flaws in popular technologies. He is a contributing author to both the Hacking Exposed and Hacking Exposed: Wireless series of books and has authored and contributed to various internal/external Foundstone tools, training courses, whitepapers, and methodologies. Brad is also an adjunct professor at NYU Poly, teaching vulnerability analysis and exploitation. Brandon Edwards Brandon Edwards is a security researcher with an extensive background in reverse engineering, vulnerability discovery, and exploitation. He is a regular speaker at security conferences, having presented on IoT hacking, programmatic debugging, and defeating anti-exploitation mechanisms. Brandon has been a recurring guest lecturer and content contributor to the security curriculum at NYU Tandon since 2009, and a judge of the NYU CSAW CTF competition since 2010. Current Students: Marcus Barbu Kyle Fox Josh Hofing Danny Lee Kent Ma Linda Nguyen Rasheeq Rahman Dennis Sun Sai Vegasena JinZhao Su  Alumni (and research areas): Zachary Cimafonte – Data-Flow Tracing in Mobile Applications Jedidiah Borovik – Autonomous Agent-Based Post-Exploitation Joshua Alexander – Mapping Organizational Exposure to Targeted Phishing Siavash Safaei – A Concurrent Portable Post-exploitation Framework ",
    "url": "/members/"
  },
  
  {
    "title": "Search",
    "excerpt": "Search for a page or post you’re looking for\n",
    "content": " ",
    "url": "/search/"
  }
  
]

